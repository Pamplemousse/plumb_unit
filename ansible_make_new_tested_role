#!/bin/bash

default_distrib=centos6

usage() {
  [ $# -gt 0 ] && echo $@ >&2
  echo "usage : $(basename $0) -D DISTRIBS [-h] [-c] [-C] role_name
  creates an ansible role with tests
  -h = display this help
  -D = specify a list of suported distributions for your role.
       DISTRIBS is a list of distributions separated by ':'
       supported_distribs are : $(${tools}/${run_test} -q)
  -C = your roles supports cluster mode" >&2
  exit 1
}

this_script=$(readlink -f $0)
tools=$(readlink -f $(dirname ${this_script}))
base_dir=$(readlink -f .)
run_test="run_tests.sh"
bash_unit="bash_unit"
ansible_cfg="ansible.cfg"

privileged=1
cluster=0
distribs=
while getopts hcCD: option
do
  case $option in
    h)
      usage
      ;;
    C)
      cluster=1
      ;;
    D)
      distribs="$OPTARG"
      ;;
  esac
done
shift $(($OPTIND-1))

[ -z "${distribs}" ] && usage "-D is a mandatory option"

[ $# -gt 0 ] && role=$1 || usage "le nom du rôle doit être passé en paramètre."
role_dir=${base_dir}/roles/${role}

if [ -n "${distribs}" ] ; then
  for distrib_name in $(echo ${distribs} | tr ":" " ")
  do
    if [ $(grep "^${distrib_name}$" <(${tools}/${run_test} -q | tr ' ' '\n') | wc -l ) -ne 1 ] ; then
      usage "${distrib_name} is not a supported distribution"
    fi
  done
fi

mkdir -p ${role_dir}/{tasks,tests,meta}

cd ${role_dir}/tasks

[ -f main.yml ] || cp ${tools}/tasks/*.yml .

cd ${role_dir}/meta

[ -f main.yml ] || echo "dependencies: []" > main.yml

cd ${role_dir}/tests

[ -f ${run_test} ] || cp ${tools}/${run_test} .${run_test}
[ -x ${run_test} ] || chmod +x .${run_test}

[ -f ${bash_unit} ] || bash <(curl -Ss https://raw.githubusercontent.com/pgrange/bash_unit/master/install.sh) >/dev/null 2>&1
[ -x ${bash_unit} ] || chmod +x ${bash_unit}

[ -f ${ansible_cfg} ] || cp ${tools}/${ansible_cfg} .


if [ -n "${distribs}" ] ; then
  for distrib_name in $(echo ${distribs} | tr ":" " ")
  do
      suffix=$( [ ${cluster} -eq 1 ] && echo "_cluster" || echo "")
      test_file="test_${role}_${distrib_name}${suffix}"
    if [ ! -f "${test_file}" ]
then
  cat << __EOF__ >"${test_file}"
#!/bin/bash

test_failed() {
  run_ansible 
  assert_equals "false" "true"
}

setup() {
  mkdir /tmp/ansible/group_vars -p

  cat << EOF > /tmp/ansible/playbook.yml
- hosts: all
  roles:
    - role: ${role}
EOF
}

run_ansible() {
  assert "sudo -u rpaulson ansible-playbook --verbose --diff -i 'localhost,' --connection=local /tmp/ansible/playbook.yml"
}

__EOF__
fi
done
fi

if [ -n "${distribs}" ] ; then
  for distrib_name in $(echo ${distribs} | tr ":" " ")
  do
    ln -s .${run_test} $(basename ${run_test} .sh)_${distrib_name}.sh
    [ ${cluster} -eq 1 ] && ln -s .${run_test} $(basename ${run_test} .sh)_${distrib_name}_cluster.sh
    cp test_${role} test_${role}_${distrib_name}
    [ ${cluster} -eq 1 ] && cp test_${role} test_${role}_${distrib_name}_cluster
  done
  rm test_${role}
fi

echo "role [${role}] created" >&2
echo "to run tests :" >&2
echo "  cd ${role_dir}/tests" >&2
echo -n "  and run one of :" >&2
for distrib_name in $(echo ${distribs} | tr ":" " ")
do
  echo " ./$(basename ${run_test} .sh)_${distrib_name}.sh" >&2
  [ ${cluster} -eq 1 ] && echo -n " ./$(basename ${run_test} .sh)_${distrib_name}_cluster.sh" >&2
done
echo >&2

cd ${base_dir}
