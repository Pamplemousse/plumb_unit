#!/bin/bash

this_script=$(readlink -f $0)
tools=$(readlink -f $(dirname ${this_script}))/template
base_dir=$(readlink -f .)
run_test="run_tests.sh"
run_test_full_path=${tools}/tests/${run_test}
privileged=1
cluster=0
distribs=

usage() {
  local supported_distribs=$($run_test_full_path -q)

  [ $# -gt 0 ] && echo $@ >&2
  echo "usage : $(basename $0) -D DISTRIBS [-h] [-c] [-C] role_name
  creates an ansible role with tests
  -h = display this help
  -D = specify a list of suported distributions for your role.
       DISTRIBS is a list of distributions separated by ':'
       supported_distribs are : ${supported_distribs}
  -C = your roles supports cluster mode" >&2
  exit 1
}

while getopts hcCD: option
do
  case $option in
    h)
      usage
      ;;
    C)
      cluster=1
      ;;
    D)
      distribs="$OPTARG"
      ;;
  esac
done
shift $(($OPTIND-1))

[ -z "${distribs}" ] && usage "-D is a mandatory option"
[ $# -gt 0 ] && role=$1 || usage "le nom du rôle doit être passé en paramètre."

role_dir=${base_dir}/${role}

if [ -n "${distribs}" ] ; then
  for distrib_name in $(echo ${distribs} | tr ":" " ")
  do
    if [ $(grep "^${distrib_name}$" <(${run_test_full_path} -q | tr ' ' '\n') | wc -l ) -ne 1 ] ; then
      usage "${distrib_name} is not a supported distribution"
    fi
  done
fi

create_ansible_directory_tree() {
  mkdir -p ${role_dir}/{tasks,tests,meta}

  cd ${role_dir}
  [ -f tasks/main.yml ] || cp ${tools}/tasks/main.yml tasks/
  [ -f tasks/interface.yml ] || cp ${tools}/tasks/interface.yml tasks/

  [ -f meta/main.yml ] || echo "dependencies: []" > meta/main.yml

  [ -f .gitlab-ci.yml ] || cp ${tools}/.gitlab-ci.yml .
}

create_tests() {
  local ansible_cfg="ansible.cfg"
  local bash_unit="bash_unit"

  cd ${role_dir}/tests

  [ -f ${run_test} ] || cp ${run_test_full_path} .${run_test}
  [ -x ${run_test} ] || chmod +x .${run_test}

  [ -f ${bash_unit} ] || bash <(curl -Ss https://raw.githubusercontent.com/pgrange/bash_unit/master/install.sh) >/dev/null 2>&1
  [ -x ${bash_unit} ] || chmod +x ${bash_unit}

  [ -f ${ansible_cfg} ] || cp ${tools}/tests/${ansible_cfg} .

}
create_ansible_directory_tree
create_tests

if [ -n "${distribs}" ] ; then
  for distrib_name in $(echo ${distribs} | tr ":" " ")
  do
      suffix=$( [ ${cluster} -eq 1 ] && echo "_cluster" || echo "")
      test_file="test_${role}_${distrib_name}${suffix}"
    if [ ! -f "${test_file}" ]
then
  cat << __EOF__ >"${test_file}"
#!/bin/bash

test_failed() {
  run_ansible
  assert_equals "false" "true"
}

setup() {
  mkdir /tmp/ansible/group_vars -p

  cat << EOF > /tmp/ansible/playbook.yml
- hosts: all
  roles:
    - role: ${role}
EOF
}

run_ansible() {
  assert "sudo --login -u rpaulson ansible-playbook --verbose --diff -i 'localhost,' --connection=local /tmp/ansible/playbook.yml"
}
__EOF__
fi
done
fi

if [ -n "${distribs}" ] ; then
  for distrib_name in $(echo ${distribs} | tr ":" " ")
  do
    ln -s .${run_test} $(basename ${run_test} .sh)_${distrib_name}.sh
    [ ${cluster} -eq 1 ] && ln -s .${run_test} $(basename ${run_test} .sh)_${distrib_name}_cluster.sh
  done
fi

echo "role [${role}] created" >&2

generate_test_doc() {
    echo "  enter ''tests/'' directory"
    echo -n "  and run one of :"
    for distrib_name in $(echo ${distribs} | tr ":" " ")
    do
      echo " ./$(basename ${run_test} .sh)_${distrib_name}.sh"
      [ ${cluster} -eq 1 ] && echo -n "  ./$(basename ${run_test} .sh)_${distrib_name}_cluster.sh"
    done
}

generate_doc() {
  local r=$1
  echo "= ansible role ${r}"
  echo
  echo "== interface"
  echo
  echo "tasks/interface.yml"
  echo
  echo "== tests"
  echo
  generate_test_doc
  echo
}

display_doc() {
  local r=$1
  echo "cd ${r}"
  generate_test_doc
}

readme="${role_dir}/README.adoc"
generate_doc ${role} > ${readme}
display_doc ${role}

cd ${base_dir}
