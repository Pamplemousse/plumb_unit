#!/bin/bash

test_q_option_lists_supported_distributions() {
  distributions=$(./run_tests.sh -q)
  assert_equals "jessie wheezy centos6 archlinux ubuntu" "${distributions}" "distribution list does not match"
}

test_do_not_run_cluster_tests_when_not_in_cluster_mode() {
  cat > test_plumb_unit_centos6_cluster <<EOF
#!/bin/bash
${test_prefix}is_one_equal_to_one() { assert_equals 1 1 "oups"; }
EOF
  assert_fail "./run_tests.sh -p one_equal_to_one | grep cluster" "cluster tests are being run"
  rm test_plumb_unit_centos6_cluster
}

test_ok_test_is_ok() {
  assert "./run_tests.sh -p one_equal_to_one test_plumb_unit"
}

test_ko_test_is_ko() {
  assert_fail "./run_tests.sh -p one_equal_to_two test_plumb_unit"
}

test_d_option_launches_debug_docker() {
### PROMPT here is based on the fact that default is centos6
### if change needed, different prompts can be found in the distrib specific tests
  assert 'expect -d <<EOF
set timeout 10
log_user 0
spawn ./run_tests.sh -d
expect {
  timeout { send_user "Failed to get prompt\n"; exit 1 }
  eof { send_user "Failed to launch docker \n"; exit 1 }
  -re ".root@.* tests.# .*"
}
send "uname\n"
expect {
  timeout { send_user "Did not answered simple command\n"; exit 1 }
  "Linux"
}
send "exit\n"
expect "exit"
EOF
'
}

test_v_option_launches_verbose_docker() {
  assert "./run_tests.sh -v -p one_equal_to_one test_plumb_unit > /tmp/expect.$$ 2>&1"
#  assert "grep -e 'Sending build context to Docker daemon' /tmp/expect.$$" "expected verbose docker output didn't come"
#  assert "grep -e 'Successfully built' /tmp/expect.$$" "expected verbose docker output didn't come"
  assert "grep -e 'Running docker with flags' /tmp/expect.$$" "expected verbose docker output didn't come"
}

test_p_option_is_passed_to_bash_unit() {
  ./run_tests.sh -p one_equal_to_one -p one_equal_to_two test_plumb_unit > /tmp/expect.$$ 2>&1

  assert "grep one_equal_to_one /tmp/expect.$$" "one_equal_to_one has not been run"
  assert "grep one_equal_to_two /tmp/expect.$$" "one_equal_to_two has not been run"
  assert_fail "grep two_equal_to_two /tmp/expect.$$" "two_equal_to_two should not have run"
}

test_mounts_common_roles_in_etc_ansible_roles() {
  assert "./run_tests.sh -p roles_in_etc_ansible_roles test_plumb_unit"
}

test_plumb_unit_runs_all_tests_from_multiple_test_files() {
  cat > test_plumb_unit_2_centos6 <<EOF
#!/bin/bash
${test_prefix}is_one_equal_to_one() { assert_equals 1 1 "oups"; }
EOF

  ./run_tests.sh > /tmp/expect.$$ 2>&1

  assert "grep test_plumb_unit_2_centos6 /tmp/expect.$$"
  assert "grep test_plumb_unit_centos6 /tmp/expect.$$"
}

setup() {
  test_prefix=test_ # workaround for bash_unit not to try to run this test on first pass
  cat > test_plumb_unit_centos6 <<EOF
#!/bin/bash
${test_prefix}is_one_equal_to_one() { assert_equals 1 1 "oups"; }
${test_prefix}is_one_equal_to_two() { assert_equals 1 2 "oups"; }
${test_prefix}is_two_equal_to_two() { assert_equals 2 2 "oups"; }
${test_prefix}roles_in_etc_ansible_roles() { assert "ls /etc/ansible/roles/plumb_unit"; }
EOF
}

teardown() {
  rm test_plumb_unit*_centos6
  rm run_tests_*.sh 2>/dev/null
  [ -L roles/plumb_unit ] && rm roles/plumb_unit
  [ -d roles ] && rmdir roles/
  rm -f /tmp/expect.$$
}

assert "expect -v" "expect needs to be installed to run this tests"
